{"code":"import React from \"react\";\r\n// In-line swap: https://stackoverflow.com/a/16201730/4035\r\nfunction swap(values, i1, i2) {\r\n    // log(`       swap Before => ${values}, i1=${i1}, i2=${i2}`);\r\n    // values[i2] = [values[i1], (values[i1] = values[i2])][0];\r\n    // log(`       swap AFTER => ${values}, i1=${i1}, i2=${i2}`);\r\n    //          0, 1, 2, 3, 4, 5, 6\r\n    // values=[10,20,30,40,50,60,70], i1=1 (20), i2=4(50) then\r\n    // [10], [?], [30, 40], [?], [60, 70]\r\n    const left = values.slice(0, i1);\r\n    const middle = values.slice(i1 + 1, i2);\r\n    const right = values.slice(i2 + 1);\r\n    // log(\r\n    //   `values=${values}, i1=${i1}, i2=${i2}, left, values[i2], middle, values[i1], right`,\r\n    //   left,\r\n    //   values[i2],\r\n    //   middle,\r\n    //   values[i1],\r\n    //   right\r\n    // );\r\n    return [...left, values[i2], ...middle, values[i1], ...right];\r\n}\r\nconst getParentIndex = (childIndex) => ~~((childIndex - 1) / 2);\r\nconst hasParent = (childIndex) => getParentIndex(childIndex) >= 0;\r\nconst getParent = (values, childIndex) => values[getParentIndex(childIndex)];\r\n// type GetChildIndex = (parentIndex: number) => number;\r\n// const hasChild = (parentIndex: number, size: number): boolean => (\r\n//   getChildIndex: GetChildIndex\r\n// ) => getChildIndex(parentIndex) < size;\r\nconst getRightChildIndex = (parentIndex) => parentIndex * 2 + 2;\r\nconst hasRightChild = (parentIndex, size) => getRightChildIndex(parentIndex) < size;\r\nconst getRightChild = (values, parentIndex) => values[getRightChildIndex(parentIndex)];\r\nconst getLeftChildIndex = (parentIndex) => parentIndex * 2 + 1;\r\nconst hasLeftChild = (parentIndex, size) => getLeftChildIndex(parentIndex) < size;\r\nconst getLeftChild = (values, parentIndex) => values[getLeftChildIndex(parentIndex)];\r\n/**\r\n * Heapify the last item\r\n * @param {Value[]} values Values to re-heapify\r\n * @returns {Value[]} A valid MinHeap\r\n */\r\nfunction heapifyDown(values) {\r\n    let index = 0;\r\n    // let copy = [...values];\r\n    // Move the last item to the top and trickle down\r\n    let lastIndex = values.length - 1;\r\n    let copy = [values[lastIndex], ...values.slice(0, lastIndex)];\r\n    const size = copy.length;\r\n    while (hasLeftChild(index, copy.length)) {\r\n        let smallerChildIndex = getLeftChildIndex(index);\r\n        // log(\r\n        //   `index=${index} size=${size} smallerChildIndex=${smallerChildIndex},\r\n        //   getRightChildIndex=${getRightChildIndex(index)}\r\n        //   getLeftChildIndex=${getLeftChildIndex(index)}\r\n        //   hasRightChild()=${hasRightChild(index, size)},\r\n        //   getRightChild()=${getRightChild(copy, size)},\r\n        //   getLeftChild()=${getLeftChild(copy, size)}`\r\n        // );\r\n        if (hasRightChild(index, size) &&\r\n            getRightChild(copy, index) < getLeftChild(copy, index)) {\r\n            smallerChildIndex = getRightChildIndex(index);\r\n            // log(`Right child is smaller!`);\r\n        }\r\n        if (copy[index] < copy[smallerChildIndex])\r\n            break;\r\n        copy = swap(copy, index, smallerChildIndex);\r\n        index = smallerChildIndex;\r\n    }\r\n    return copy;\r\n}\r\nfunction heapifyUp(values) {\r\n    let heapedValues = [...values];\r\n    let index = heapedValues.length - 1;\r\n    // log(\r\n    //   `index=${index},\r\n    //   getParentIndex(index)=${getParentIndex(index)},\r\n    //   hasParent(index)=${hasParent(index)},\r\n    //   getParent(heapedValues, index)=${getParent(heapedValues, index)},\r\n    //   heapedValues[index]=${heapedValues[index]}`,\r\n    //   heapedValues\r\n    // );\r\n    while (hasParent(index) &&\r\n        getParent(heapedValues, index) > heapedValues[index]) {\r\n        // log(`while curr=${heapedValues[index]} index=${index}`);\r\n        const parentIndex = getParentIndex(index);\r\n        heapedValues = swap(heapedValues, parentIndex, index);\r\n        index = parentIndex;\r\n    }\r\n    // log(`   heapifyup result ===>`, heapedValues);\r\n    return heapedValues;\r\n}\r\nfunction addValue(values, value) {\r\n    return heapifyUp([...values, value]);\r\n}\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case \"ADD\" /* Add */:\r\n            const addValues = addValue(state, action.payload.value);\r\n            return [...addValues];\r\n        case \"SET\" /* Set */:\r\n            const setValues = heapifyDown(action.payload.values);\r\n            return [...setValues];\r\n        case \"Clear\" /* Clear */:\r\n            return [];\r\n        case \"GET\" /* Get */:\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nfunction useMinHeap(initialValues = []) {\r\n    const [values, dispatch] = React.useReducer(reducer, initialValues, initializer);\r\n    const freshValues = React.useRef(values);\r\n    freshValues.current = values;\r\n    function initializer(values) {\r\n        return values.reduce((acc, value) => addValue(acc, value), []);\r\n    }\r\n    function dump() {\r\n        return freshValues.current;\r\n    }\r\n    function add(value) {\r\n        dispatch({ type: \"ADD\" /* Add */, payload: { value } });\r\n    }\r\n    function get() {\r\n        const minimumValue = freshValues.current[0];\r\n        // We pop the first value and the current values is set to everything after the first item\r\n        dispatch({\r\n            type: \"SET\" /* Set */,\r\n            payload: { values: freshValues.current.slice(1) }\r\n        });\r\n        return minimumValue;\r\n    }\r\n    function peek() {\r\n        return freshValues.current[0];\r\n    }\r\n    function clear() {\r\n        dispatch({ type: \"Clear\" /* Clear */ });\r\n    }\r\n    return { dump, add, get, peek, clear };\r\n}\r\nexport { useMinHeap };\r\n//# sourceMappingURL=index.js.map","references":["C:/misc/src/github/cshooks/hooks/packages/useHeap/node_modules/@types/react/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"C:/misc/src/github/cshooks/hooks/packages/useHeap/src/index.d.ts","writeByteOrderMark":false,"text":"declare type Value = number;\r\ndeclare function useMinHeap(initialValues?: Value[]): {\r\n    dump: () => number[];\r\n    add: (value: number) => void;\r\n    get: () => number | undefined;\r\n    peek: () => number | undefined;\r\n    clear: () => void;\r\n};\r\nexport { useMinHeap };\r\n"}}
